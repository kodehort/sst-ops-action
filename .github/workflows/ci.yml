name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.2.19'

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Environment
        uses: ./.github/actions/setup-node-env
        with:
          bun-version: ${{ env.BUN_VERSION }}
          cache-key-suffix: -quality
        
      - name: Type Check
        run: bun run typecheck
        
      - name: Lint
        run: bun run lint
        
      - name: Test with Coverage
        run: bun run test:coverage
        
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ github.sha }}
          path: coverage/
          retention-days: 30

  build-and-verify:
    name: Build & Verify
    runs-on: ubuntu-latest
    needs: quality-gates
    outputs:
      bundle-size: ${{ steps.bundle-info.outputs.size }}
      bundle-hash: ${{ steps.bundle-info.outputs.hash }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Environment
        uses: ./.github/actions/setup-node-env
        with:
          bun-version: ${{ env.BUN_VERSION }}
          cache-key-suffix: -build
          
      - name: Build Distribution
        run: bun run build
        
      - name: Extract Bundle Information
        id: bundle-info
        run: |
          # Check bundle exists
          if [ ! -f "dist/index.js" ]; then
            echo "‚ùå Bundle file dist/index.js not found"
            exit 1
          fi
          
          # Get bundle size and hash
          BUNDLE_SIZE=$(stat -f%z dist/index.js 2>/dev/null || stat -c%s dist/index.js)
          BUNDLE_SIZE_MB=$((BUNDLE_SIZE / 1024 / 1024))
          BUNDLE_HASH=$(sha256sum dist/index.js | cut -d' ' -f1)
          
          echo "size=${BUNDLE_SIZE_MB}MB" >> $GITHUB_OUTPUT
          echo "hash=${BUNDLE_HASH}" >> $GITHUB_OUTPUT
          
          echo "üì¶ Bundle size: ${BUNDLE_SIZE_MB}MB"
          echo "üîí Bundle hash: ${BUNDLE_HASH:0:16}..."
          
          # Verify bundle size limit
          if [ $BUNDLE_SIZE_MB -gt 10 ]; then
            echo "‚ùå Bundle size exceeds 10MB limit!"
            exit 1
          fi
          
      - name: Test Bundle Execution
        run: |
          echo "üß™ Testing bundle execution..."
          timeout 30s node -c dist/index.js
          echo "‚úÖ Bundle syntax validation passed"
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 30

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [quality-gates, build-and-verify]
    if: always()
    
    steps:
      - name: Generate Summary
        run: |
          echo "## üöÄ CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Quality Gates Status
          if [ "${{ needs.quality-gates.result }}" = "success" ]; then
            echo "‚úÖ **Quality Gates**: All checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Quality Gates**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Build Status
          if [ "${{ needs.build-and-verify.result }}" = "success" ]; then
            echo "‚úÖ **Build & Verify**: Bundle created successfully" >> $GITHUB_STEP_SUMMARY
            echo "   - Size: ${{ needs.build-and-verify.outputs.bundle-size }}" >> $GITHUB_STEP_SUMMARY
            echo "   - Hash: \`${{ needs.build-and-verify.outputs.bundle-hash }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Build & Verify**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Distribution is now built on-demand, no check needed
          echo "üì¶ **Distribution**: Built on-demand during releases" >> $GITHUB_STEP_SUMMARY
          
      - name: Set Status
        run: |
          if [ "${{ needs.quality-gates.result }}" != "success" ] || [ "${{ needs.build-and-verify.result }}" != "success" ]; then
            echo "‚ùå CI pipeline failed"
            exit 1
          else
            echo "‚úÖ CI pipeline completed successfully"
          fi